import 'dart:convert';
import 'dart:typed_data';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:portfolio/core/routes.dart';
import 'package:provider/provider.dart';
import '../controllers/project_controller.dart';
import '../models/project.dart';
import '../widgets/themed_app_bar.dart';

class AdminPage extends StatefulWidget {
  const AdminPage({super.key});

  @override
  State<AdminPage> createState() => _AdminPageState();
}

class _AdminPageState extends State<AdminPage> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  List<Uint8List> _pickedImages = [];
  final _technologiesController = TextEditingController();
  final _githubLinkController = TextEditingController();

  @override
  void initState() {
    super.initState();
    // Fetch projects when the page initializes
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<ProjectController>(context, listen: false).fetchProjects();
    });
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _technologiesController.dispose();
    _githubLinkController.dispose();
    super.dispose();
  }

  Future<void> _pickImages() async {
    final result = await FilePicker.platform.pickFiles(
      allowMultiple: true,
      type: FileType.image,
      withData: true,
    );
    if (result != null) {
      setState(() {
        _pickedImages = result.files
            .where((f) => f.bytes != null)
            .map((f) => f.bytes!)
            .toList();
      });
    }
  }

  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      final images = _pickedImages.map((bytes) => base64Encode(bytes)).toList();
      final newProject = Project(
        id: '', // ID will be generated by the controller
        title: _titleController.text,
        description: _descriptionController.text,
        images: images,
        technologies: _technologiesController.text
            .split(',')
            .map((e) => e.trim())
            .toList(),
        githubLink: _githubLinkController.text,
      );

      Provider.of<ProjectController>(context, listen: false)
          .addProject(newProject);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text('New treasure (project) has been chronicled!')),
      );

      _formKey.currentState!.reset();
      setState(() {
        _pickedImages.clear();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final projects = Provider.of<ProjectController>(context).projects;

    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: ThemedAppBar(
          title: "Captain's Log",
          bottom: TabBar(
            labelStyle:
                Theme.of(context).textTheme.bodyLarge!.copyWith(color: Colors.green.shade700),
            tabs: [
              Tab(text: 'Create'),
              Tab(text: 'Manage'),
            ],
          ),
        ),
        backgroundColor: Theme.of(context).colorScheme.primary.withOpacity(0.5),
        body: TabBarView(
          children: [
            _buildCreateForm(),
            _buildManageList(projects),
          ],
        ),
      ),
    );
  }

  Widget _buildCreateForm() {
    return Center(
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(32.0),
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 600),
          child: Card(
            elevation: 5,
            shadowColor: Colors.green.shade800,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(26.0),
            ),
            child: Padding(
              padding: const EdgeInsets.all(24.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Text('Chronicle a New Discovery',
                        style: Theme.of(context).textTheme.headlineMedium),
                    const SizedBox(height: 24),
                    TextFormField(
                      controller: _titleController,
                      decoration: const InputDecoration(
                          labelText: 'Treasure\'s Name (Title)'),
                      validator: (value) =>
                          value!.isEmpty ? 'Every treasure needs a name!' : null,
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _descriptionController,
                      decoration: const InputDecoration(
                          labelText:
                              'The Tale of This Treasure (Description)'),
                      maxLines: 5,
                      validator: (value) => value!.isEmpty
                          ? 'A treasure\'s tale must be told!'
                          : null,
                    ),
                    const SizedBox(height: 16),
                    ElevatedButton.icon(
                      icon: const Icon(Icons.image),
                      label: const Text('Pick Images'),
                      onPressed: _pickImages,
                    ),
                    const SizedBox(height: 12),
                    if (_pickedImages.isNotEmpty)
                      Wrap(
                        spacing: 8,
                        runSpacing: 8,
                        children: List.generate(
                            _pickedImages.length,
                            (idx) => Stack(
                                  alignment: Alignment.topRight,
                                  children: [
                                    ClipRRect(
                                      borderRadius: BorderRadius.circular(8),
                                      child: Image.memory(
                                        _pickedImages[idx],
                                        width: 100,
                                        height: 80,
                                        fit: BoxFit.cover,
                                      ),
                                    ),
                                    Positioned(
                                      top: 2,
                                      right: 2,
                                      child: GestureDetector(
                                        onTap: () {
                                          setState(() {
                                            _pickedImages.removeAt(idx);
                                          });
                                        },
                                        child: Container(
                                          decoration: BoxDecoration(
                                            color:
                                                Colors.black.withOpacity(0.6),
                                            shape: BoxShape.circle,
                                          ),
                                          child: const Icon(Icons.close,
                                              color: Colors.white, size: 18),
                                        ),
                                      ),
                                    ),
                                  ],
                                )),
                      ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _technologiesController,
                      decoration: const InputDecoration(
                          labelText:
                              'Ancient Runes (Technologies, comma-separated)'),
                      validator: (value) => value!.isEmpty
                          ? 'What ancient runes were used?'
                          : null,
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _githubLinkController,
                      decoration: const InputDecoration(
                          labelText: 'Secret Chart (GitHub Link, optional)'),
                    ),
                    const SizedBox(height: 32),
                    ElevatedButton(
                      onPressed: _submitForm,
                      child: const Text('Add to the Hoard'),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildManageList(List<Project> projects) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 20.0),
        child: Card(
          elevation: 5,
          shadowColor: Colors.green.shade800,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(26.0),
          ),
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 600),
            child: ListView.separated(
              padding: const EdgeInsets.all(16),
              itemCount: projects.length,
              itemBuilder: (context, index) {
                final project = projects[index];
                return _HoverListTile(
                  title: project.title,
                  onEdit: () {
                    context.goNamed(
                      RouteConstants.editProject,
                      pathParameters: {'id': project.id},
                    );
                  },
                  onDelete: () {
                    Provider.of<ProjectController>(context, listen: false)
                        .deleteProject(project.id);
                  },
                );
              },
              separatorBuilder: (context, index) => const SizedBox(
                height: 16,
              ),
            ),
          ),
        ),
      ),
    );
  }
}

class _HoverListTile extends StatefulWidget {
  final String title;
  final VoidCallback onEdit;
  final VoidCallback onDelete;
  const _HoverListTile(
      {required this.title, required this.onEdit, required this.onDelete});

  @override
  State<_HoverListTile> createState() => _HoverListTileState();
}

class _HoverListTileState extends State<_HoverListTile> {
  bool _hovered = false;

  @override
  Widget build(BuildContext context) {
    return MouseRegion(
      onEnter: (_) => setState(() => _hovered = true),
      onExit: (_) => setState(() => _hovered = false),
      child: Container(
        height: 50,
        constraints: BoxConstraints(maxWidth: 600),
       
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: Colors.green.shade800.withOpacity(0.5),
              width: 2,
            ),
             color: _hovered
            ? Colors.green.shade800.withOpacity(0.5)
            : Colors.transparent,
          ),
        child: ListTile(
          title:
              Text(widget.title, style: Theme.of(context).textTheme.bodyMedium),
          trailing: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              IconButton(
                icon: const Icon(Icons.edit, color: Colors.white),
                onPressed: widget.onEdit,
              ),
              IconButton(
                icon: const Icon(Icons.delete, color: Colors.red),
                onPressed: widget.onDelete,
              ),
            ],
          ),
        ),
      ),
    );
  }
}
